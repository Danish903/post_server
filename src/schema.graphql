#import EventWhereInput, EventConnection, FavoriteEventPreviousValues , CommentOrderByInput, UserOrderByInput , EventOrderByInput from "./generated/prisma.graphql"

type User {
   id: ID!
   favorites: [FavoriteEvent!]!
   username: String!
   email: String
   password: String
   events: [Event!]!
   comments: [Comment!]!
   updatedAt: String!
   createdAt: String!
}

type FavoriteEvent {
   id: ID!
   event: Event!
   user: User!
}
type Event {
   id: ID!
   title: String!
   imageURL: String!
   description: String!
   published: Boolean!
   disableComment: Boolean!
   likes: [FavoriteEvent!]!
   likesCount: Int!
   host: User!
   comments: [Comment!]!
   updatedAt: String!
   createdAt: String!
}
type Comment {
   id: ID!
   text: String!
   user: User!
   event: Event!
   createdAt: DateTime!
   updatedAt: DateTime!
}

type Query {
   users(
      query: String
      first: Int
      skip: Int
      after: String
      orderBy: UserOrderByInput
   ): [User!]!
   me: User
   events(
      query: String
      first: Int
      skip: Int
      after: String
      orderBy: EventOrderByInput
   ): [Event!]!
   event(id: ID!): Event!
   getComment(
      eventId: ID!
      first: Int
      after: String
      orderBy: CommentOrderByInput
   ): [Comment!]!
   getFavoriteEvent(eventId: ID!): [FavoriteEvent]!
   eventsConnection(
      where: EventWhereInput
      first: Int
      skip: Int
      after: String
      before: String
      last: Int
      orderBy: EventOrderByInput
   ): EventConnection!
}

type Mutation {
   login(data: LoginUserInput!): AuthPayload!
   createUser(data: CreateUserInput!): AuthPayload!
   deleteUser: User!
   updateUser(data: UpdateUserInput!): User!
   createEvent(data: CreateEventInput!): Event!
   updateEvent(id: ID!, data: UpdateEventInput!): Event!
   likePhoto(id: ID!): FavoriteEvent!
   unLikePhoto(id: ID!, favId: ID!): FavoriteEvent!
   createComment(data: CreateCommentInput!): Comment!
   deleteComment(id: ID!, eventId: ID!): Comment!
   updateComment(id: ID!, data: UpdateCommentInput!): Comment!
}

type Subscription {
   event: EventSubscriptionPayload!
   comment(eventId: ID!): CommentSubscriptionPayload!
   favoriteEvent(eventId: ID!): FavoriteEventSubscriptionPayload!
   singleEvent(id: ID!): EventSubscriptionPayload!
}
type FavoriteEventSubscriptionPayload {
   mutation: MutationType!
   node: FavoriteEvent
   previousValues: PreviousValues
}
type CommentSubscriptionPayload {
   mutation: MutationType!
   node: Comment
   previousValues: PreviousValues
}

type PreviousValues {
   id: ID!
}
type EventSubscriptionPayload {
   mutation: MutationType!
   node: Event
}
input CreateEventInput {
   title: String!
   description: String!
   published: Boolean!
   imageURL: String!
   disableComment: Boolean!
}

input CreateCommentInput {
   eventId: ID!
   text: String!
}
input CreateUserInput {
   username: String!
   email: String!
   password: String!
}

input UpdateUserInput {
   username: String
   email: String
   password: String
}
input UpdateEventInput {
   title: String
   description: String
   published: Boolean
   imageURL: String
   disableComment: Boolean
}
input UpdateCommentInput {
   text: String
}
input LoginUserInput {
   email: String!
   password: String!
}

enum MutationType {
   UPDATED
   DELETED
   CREATED
}

type AuthPayload {
   token: String!
   user: User!
}
